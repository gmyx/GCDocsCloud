###############################################################################
# Statefulsets for OpenText CSP
# Update the docker image(s) below to the desired image
# Content Server admin settings can be applied on container start - see below 
# for details
#
# Statefulsets do not automatically clean up persistent volume claims
# If you want to redeploy from scratch, clean up old claims first
# For example:
# kubectl delete pvc --all
# This will delete *all* claims in your namespace, so use with care
###############################################################################


###############################################################################
# OpenText Archive Center
###############################################################################
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: otac
  name: otac
spec:
  replicas: 1
  serviceName: otac
  selector:
    matchLabels:
      app: otac
  template:
    metadata:
      labels:
        app: otac
    spec:
      securityContext:
        # 1000 should be for 'otuser'. This will make volumes be mounted with
        # 'otuser' group permissions.
        fsGroup: 1000
      containers:
      - envFrom:
        - configMapRef:
            name: otac-configmap
        - secretRef:
            name: otac-secrets
        image: otac:16.2.2
        imagePullPolicy: Always
        name: otac
        resources:
          limits:
            cpu: 2
            memory: 3Gi
          requests:
            cpu: 1
            memory: 1.5Gi
        ports:
        - containerPort: 4034
        - containerPort: 8080
        volumeMounts:
        - mountPath: /etc/opentext
          name: otac-opentext-landscape
        - mountPath: /opt/opentext/ac_bdv
          name: otac-dbv
        - mountPath: /opt/opentext/ac_dv
          name: otac-dv
        - mountPath: /opt/opentext/ac_sd
          name: otac-sd
        - mountPath: /opt/opentext/ac
          name: otac
        - mountPath: /opt/opentext/logs
          name: otac-logs
        - mountPath: /opt/tomcat/logs
          name: otac-tomcat-logs
      hostname: otac
  volumeClaimTemplates:
  - metadata:
      name: otac-opentext-landscape
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otac-dbv
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otac-dv
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otac-sd
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otac-logs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otac-tomcat-logs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otac
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
---

###############################################################################
# OpenText Content Server
###############################################################################
# Primary Server - Admin configuration:
###############################################################################
kind: StatefulSet
apiVersion: apps/v1
metadata:
    name: otcs-admin
spec:
  serviceName: otcs-admin
  replicas: 1
  selector:
    matchLabels:
      app: otcs-admin
  template:
    metadata:
      labels:
        app: otcs-admin
    spec:
      securityContext:
        # 1000 should be for 'otuser'. This will make volumes be mounted with 
        # 'otuser' group permissions.
        fsGroup: 1000
      containers:
      - envFrom:
        - configMapRef:
            name: otcs-admin-configmap
        - secretRef:
            name: otcs-secrets
        image: gcdocscloudctr.azurecr.io/otcs/otcs:16.2.10
        imagePullPolicy: Always
        name: cs-pri-adm
        readinessProbe:
            exec:
              command:
                - "/opt/opentext/cs_shell_scripts/supervisord/check_cs_readiness.sh"
            initialDelaySeconds: 15
            periodSeconds: 5
        livenessProbe:
            exec:
              command:
                - "/opt/opentext/cs_shell_scripts/supervisord/check_cs_liveness.sh"
            initialDelaySeconds: 18
            periodSeconds: 5
            failureThreshold: 3
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 1
            memory: 1.5Gi
        ports:
        # Content Server ports:
        - containerPort: 2099
        - containerPort: 5858
        - containerPort: 5869
        - containerPort: 8500
        - containerPort: 8501
        - containerPort: 8502
        - containerPort: 8503
        - containerPort: 8504
        - containerPort: 8505
        - containerPort: 8506
        - containerPort: 8507
        - containerPort: 8508
        - containerPort: 8509
        - containerPort: 8510
        - containerPort: 8511
        - containerPort: 8512
        - containerPort: 8513
        - containerPort: 8514
        # Tomcat port:
        - containerPort: 8080
        volumeMounts:
        - mountPath: "/opt/opentext/cs/appData"
          name: otcs-admin-appdata
        - mountPath: "/opt/opentext/cs/config"
          name: otcs-admin-config
        - mountPath: "/opt/opentext/cs/csapplications"
          name: otcs-admin-csapplications
        # Uncomment below if you are using a shared EFS
        #- mountPath: "/opt/opentext/cs_efs"
          #name: otcs-efs
        - mountPath: "/opt/opentext/cs_index"
          name: otcs-admin-index
        - mountPath: "/opt/opentext/cs/langpkgstaging"
          name: otcs-admin-langpkgstaging
        - mountPath: "/opt/opentext/cs/logs"
          name: otcs-admin-logs
        - mountPath: "/opt/opentext/customconfig/cs/sp.pem"
          name: otcs-ac-cert-configmap
          subPath: sp.pem
        # This is an example of a file containing admin settings to be applied
        # to Content Server on first container start. There must be a 
        # corresponding configmap with the name 'cs-adminsettings-configmap' in
        # the configmaps yaml. To use, uncomment the 
        # 'cs-adminsettings-configmap' mountPath and volume below:
        #- mountPath: "/opt/opentext/customconfig/cs/adminEmail.xml"
        #  name: cs-adminsettings-configmap
        #  subPath: adminEmail.xml
      volumes:
        - name: otcs-ac-cert-configmap
          configMap:
            name: otcs-ac-cert-configmap
        #- name: otcs-adminsettings-configmap
        #  configMap:
        #    name: otcs-adminsettings-configmap
        # 
        # Uncomment below if you are using a shared EFS
        #- name: otcs-efs
          #persistentVolumeClaim:
            #claimName: otcs-efs
        #
        # Uncomment below if you are using shared search storage
        #- name: otcs-admin-index
          #persistentVolumeClaim:
            #claimName: otcs-admin-index
  volumeClaimTemplates:
  - metadata:
      name: otcs-admin-appdata
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otcs-admin-config
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - metadata:
      name: otcs-admin-csapplications
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  # If you are using shared storage for search in the case of multiple Admin servers, you must comment out the below otcs-admin-index
  # There is an example search pvc definition 'otcs-admin-index' in the persistent volume claims yaml file
  # Please see the documentation for an example of using NFS storage on Google Cloud Platform
  - metadata:
      name: otcs-admin-index
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otcs-admin-langpkgstaging
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otcs-admin-logs
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

---

###############################################################################
# Secondary Server - frontend configuration
###############################################################################
kind: StatefulSet
apiVersion: apps/v1
metadata:
    name: otcs-frontend
spec:
  serviceName: otcs-frontend
  replicas: 1
  selector:
    matchLabels:
      app: otcs-frontend
  template:
    metadata:
      labels:
        app: otcs-frontend
    spec:
      securityContext:
        # 1000 should be for 'otuser'. This will make volumes be mounted with
        # 'otuser' group permissions.
        fsGroup: 1000
      containers:
      - envFrom:
        - configMapRef:
            name: otcs-frontend-configmap
        - secretRef:
            name: otcs-secrets
        image: gcdocscloudctr.azurecr.io/otcs/otcs:16.2.10
        imagePullPolicy: Always
        name: cs-sec-fe
        readinessProbe:
            exec:
              command:
                - "/opt/opentext/cs_shell_scripts/supervisord/check_cs_readiness.sh"
            initialDelaySeconds: 15
            periodSeconds: 5
        livenessProbe:
            exec:
              command:
                - "/opt/opentext/cs_shell_scripts/supervisord/check_cs_liveness.sh"
            initialDelaySeconds: 15 
            periodSeconds: 5
            failureThreshold: 3
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 1
            memory: 1.5Gi
        ports:
        # Content Server ports:
        - containerPort: 2099
        # Tomcat port:
        - containerPort: 8080
        volumeMounts:
        - mountPath: "/opt/opentext/cs/appData"
          name: otcs-frontend-appdata
        - mountPath: "/opt/opentext/cs/config"
          name: otcs-frontend-config
        - mountPath: "/opt/opentext/cs/csapplications"
          name: otcs-frontend-csapplications
        # Uncomment below if you are using a shared EFS
        #- mountPath: "/opt/opentext/cs_efs"
          #name: otcs-efs
        - mountPath: "/opt/opentext/cs/langpkgstaging"
          name: otcs-frontend-langpkgstaging
        - mountPath: "/opt/opentext/cs/logs"
          name: otcs-frontend-logs
        - mountPath: "/opt/opentext/customconfig/cs/sp.pem"
          name: otcs-ac-cert-configmap
          subPath: sp.pem
      volumes:
        - name: otcs-ac-cert-configmap
          configMap:
            name: otcs-ac-cert-configmap
        # Uncomment below if you are using a shared EFS
        #- name: otcs-efs
          #persistentVolumeClaim:
            #claimName: otcs-efs
  volumeClaimTemplates:
  - metadata:
      name: otcs-frontend-appdata
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otcs-frontend-config
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
  - metadata:
      name: otcs-frontend-csapplications
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otcs-frontend-langpkgstaging
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: otcs-frontend-logs
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

---

###############################################################################
# OpenText Directory Services (OTDS)
###############################################################################
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: otds
spec:
  serviceName: otds
  replicas: 1
  selector:
    matchLabels:
      app: otds
  template:
    metadata:
      labels:
        app: otds
    spec:
      securityContext:
        # 1000 should be for 'otuser'. This will make volumes be mounted with
        # 'otuser' group permissions.
        fsGroup: 1000
      containers:
      - envFrom:
        - secretRef:
            name: otds-secrets
        image: gcdocscloudctr.azurecr.io/otcs/otcs:16.2.10
        imagePullPolicy: Always
        name: otds
        resources:
          limits:
            cpu: 2
            memory: 3Gi
          requests:
            cpu: 1
            memory: 1.5Gi
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /opt/otds
          name: otds-data
      hostname: otds

  volumeClaimTemplates:
  - metadata:
      name: otds-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---

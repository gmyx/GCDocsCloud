###############################################################################
# Configmaps for OpenText CSP
#
# You must manually populate contHostName below with the OTDS user login domain
# You can also leave it blank and dynamically use kubernetes REST API by 
# running:
# kubectl create rolebinding default-viewer \
#  --clusterrole=view \
#  --serviceaccount=default:default \
#  --namespace=default
###############################################################################


##############################################################################
# Archive Center Configurations
#############################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: otac-configmap
data:
  # AC config:
  bizHost: otac-0
  acProtocol: http
  resType: AC
  dbType: pg
  targetDBName: ecr
  targetDBUserName: ecr
  acPostAcConfig: "true"
  acArchiveName: Archive1
  acPoolName: Pool1
  acVolumeName: Vol1
  acVolumeDir: /opt/opentext/ac_sd/vol1
  # Postgres DB config:
  PGHOST: otac-db
  PGPORT: "5432"
  PGUSER: postgres
  # OTDS config:
  otdsAdmin: admin
  otdsTomcatHostname: otds
  otdsTomcatPort: "80"
  otdsTomcatProtocol: http
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: otac-db-configmap
data:
  # Postgres initdb recommends a subdirectory be created to contain the data, rather than the direct mount point
  PGDATA: /var/lib/postgresql/data/pgdata
---

###############################################################################
# Content Server Configurations
###############################################################################
# Primary Server - Admin
###############################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: otcs-admin-configmap
data:
  # CS config:
  # ----------
  # csType:
  # primary   - this system will setup as the search / index server
  # secondary - will be a frontend server
  csType: primary
  # csServerRole:
  # admin     - Will set the server up as the primary admin and spawn both
  #             llserver and admserv process. Agents will also be running on 
  #             this server
  csServerRole: admin
  resType: CS
  # CS_PUBLIC_HOSTNAME and contHostName should match the user facing hostnames for
  # CS and OTDS. These can be DNS names, or static IPs. If CS_PUBLIC_HOSTNAME or
  # contHostName is empty, we will try to get the loadbalancer external IP via
  # kubernetes REST API
  CS_PUBLIC_HOSTNAME: ""
  contHostName: ""
  # CS_PUBLIC_PORT is the port where user facing requests enter, typically 80 or 8080
  CS_PUBLIC_PORT: "80"
  # IS_KUBERNETES_DEPLOYMENT flag will indicate whether we are deploying within
  # Kubernetes or not. If we are not, this will change some of the automation 
  # to run on docker engine / docker-compose level
  IS_KUBERNETES_DEPLOYMENT: "true"
  csProtocol: http
  # Database config:
  targetDBName: cs
  dbType: pg      
  PGHOST: otcs-db
  PGPORT: "5432"
  PGUSER: postgres
  csDBUser: cs
  autoExtendDataFile: "true"
  autoExtendLogFiles: "true"
  # dbAction:
  # 0 = create new
  # 1 = use existing
  dbAction: "0"
  # EFS storage should only be used with read/write storage, like a NFS share
  # EFS must use a storage path that is read/write accessible for all containers
  # There is an example EFS pvc definition 'otcs-efs' in the persistent volume claims yaml file
  # Please also ensure that the volume mount and volume 'otcs-efs' is uncommented from the Content Server statefulset yaml
  # Please see the documentation for an example of using NFS storage on Google Cloud Platform
  # You cannot use Archive Center storage with EFS storage, and Archive Center environment variables should be removed or commented out
  useExternalDocumentStorage: "false"
  externalDocumentStoragePath: "/opt/opentext/cs_efs"
  # These variables are optional for using Archive Center as the primary storage provider
  # If all Archive Center variables are defined then we will try to use Archive Center as primary storage
  AC_HOSTNAME: otac-0
  AC_PORT: "8080"
  AC_ARCHIVENAME: Archive1
  # OTDS config:
  otdsAdmin: admin
  otdsTomcatHostname: otds
  otdsTomcatPort: "80"
  otdsTomcatProtocol: http
  # Tomcat config:
  tomcatPort: "8080"
  tomcatProtocol: http
---

###############################################################################
# Secondary Server - Frontend
###############################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: otcs-frontend-configmap
data:
  # CS config:
  # ----------
  # csType:
  # primary   - this system will setup as the search / index server
  # secondary - will be a frontend server
  csType: secondary
  # csServerRole:
  # This parameter will only be used when the csType is set to
  # secondary. This parameter can be the following:
  # frontend  - Will set the server up as a frontend and only spawn the
  #             llserver process
  csServerRole: frontend
  resType: CS
  # CS_PUBLIC_HOSTNAME and contHostName should match the user facing hostnames for
  # CS and OTDS. These can be DNS names, or static IPs. If CS_PUBLIC_HOSTNAME or
  # contHostName is empty, we will try to get the loadbalancer external IP via
  # kubernetes REST API
  CS_PUBLIC_HOSTNAME: ""
  contHostName: ""
  # CS_PUBLIC_PORT is the port where user facing requests enter, typically 80 or 8080
  CS_PUBLIC_PORT: "80"  
  # IS_KUBERNETES_DEPLOYMENT flag will indicate whether we are deploying within
  # Kubernetes or not. If we are not, this will change some of the automation
  # to run on docker engine / docker-compose level
  IS_KUBERNETES_DEPLOYMENT: "true"
  csProtocol: http
  # Database config:
  targetDBName: cs
  dbType: pg
  PGHOST: otcs-db
  PGPORT: "5432"
  PGUSER: postgres
  csDBUser: cs
  autoExtendDataFile: "true"
  autoExtendLogFiles: "true"
  # dbAction:
  # 0 = create new
  # 1 = use existing
  dbAction: "1"
  # EFS storage should only be used with read/write storage, like a NFS share
  # EFS must use a storage path that is read/write accessible for all containers
  # There is an example EFS pvc definition 'otcs-efs' in the persistent volume claims yaml file
  # Please also ensure that the volume mount and volume 'otcs-efs' is uncommented from the Content Server statefulset yaml
  # Please see the documentation for an example of using NFS storage on Google Cloud Platform
  # You cannot use Archive Center storage with EFS storage, and Archive Center environment variables should be removed or commented out
  useExternalDocumentStorage: "false"
  externalDocumentStoragePath: "/opt/opentext/cs_efs"
  # These variables are optional for using Archive Center as the primary storage provider
  # If all Archive Center variables are defined then we will try to use Archive Center as primary storage
  AC_HOSTNAME: otac-0
  AC_PORT: "8080"
  AC_ARCHIVENAME: Archive1
  # OTDS config:
  otdsAdmin: admin
  otdsTomcatHostname: otds
  otdsTomcatPort: "80"
  otdsTomcatProtocol: http
  # Tomcat config:
  tomcatPort: "8080"
  tomcatProtocol: http
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: otcs-db-configmap
data:
  # Postgres initdb recommends a subdirectory be created to contain the data, rather than the direct mount point
  PGDATA: /var/lib/postgresql/data/pgdata
---

# sp.pem security certificate to be used with Archive Server
# You can use the Archive Center cert-tool to generate your own certificate and replace the text below
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: otcs-ac-cert-configmap
data:
  sp.pem: |
    -----BEGIN RSA PRIVATE KEY-----
    MIICXAIBAAKBgQC79M9a3XUt9RH+EDHrKQoonffyAYP6EoXUEieprVVQvqC2AbcO
    phERAM3KK1B2gFEWBewdykiO3l7gnSOtlxZTeZRRFNqXYT59zim+sE0GdEq+RtGj
    Ouqj9LHT7fOdzMQ+Mzss7AMpgVza3LNVoZOGnr3+zQcM7MyewF5rUKlOgwIDAQAB
    AoGBALZHG5TOcmaoZdOTVyXs/foYAK5FA/3QWtMo7Cgkfjm5NVhtX18odCKeOfUX
    fof9tyV5htv5IdbUFwUTv9cIUE/nBUrEKKSlKA3lwb8w/lPWgSvU7NvyWXGvu8OK
    tLnRyS4MVE6ZS8statjoVR434hqpH7KftHRBJK1j+cVwUdPhAkEA7nPVc/xs3uZ/
    1vuyF8iYuYFEyi8p5e2xUstaIkJWuF66F+7WiS9sJk0ugKPvwyJzkFC1GO1zl8Ui
    6Yhqc0aKsQJBAMnJr95BTyCe2KXi+D96me2hgznTUQlGQUvUqtp2LriUvVUsYnJ2
    Ndthn4vToUi/jS0/Loipu5hMlHNxfW9HUXMCQA2ZucEF0sfb6cq/TGci3+MkxmGp
    0v/0ULriMl/l3MBjVsXqr33foJGGsXJQ52n/2wuOLuYfFQrBCb68MyYkDeECQBmW
    6SWfVKCHZGQNF3w9WP3oqJKRuMobTbaHHq+boysnOadufIGVehj7FVePG/n0yLt/
    MrCEDdUviPfm4YhWG/8CQFSam0SWgE4iLmW2SitcNBpi8KHyF9Kh0j52xKyLqEdv
    qz22sZYVpO6dugRo5Wg/g8AykKmfTO/eIkQ6Hb6H7YE=
    -----END RSA PRIVATE KEY-----
    -----BEGIN CERTIFICATE-----
    MIIBuDCCASECCF2DfgLaQYUZMA0GCSqGSIb3DQEBBQUAMCExHzAdBgNVBAMMFlNQ
    X3JlYXBlci5vcGVudGV4dC5uZXQwHhcNMTkwOTE5MDAwMDAwWhcNMjkwOTE5MDAw
    MDAwWjAhMR8wHQYDVQQDDBZTUF9yZWFwZXIub3BlbnRleHQubmV0MIGfMA0GCSqG
    SIb3DQEBAQUAA4GNADCBiQKBgQC79M9a3XUt9RH+EDHrKQoonffyAYP6EoXUEiep
    rVVQvqC2AbcOphERAM3KK1B2gFEWBewdykiO3l7gnSOtlxZTeZRRFNqXYT59zim+
    sE0GdEq+RtGjOuqj9LHT7fOdzMQ+Mzss7AMpgVza3LNVoZOGnr3+zQcM7MyewF5r
    UKlOgwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBADsVV2lr2ikyCLmNr1zH6uJV2GwP
    mXy7hTzk74i/o/mdhV7QxTI+D6D77mpIkzxf05SmMPuNtpjgQcMU298rornBkDRG
    iQPWhyk7U6Jj6TND60scecYcun+bxSv5dsHEKfLkp317Lf/63cqDVS/RUNSjXXUJ
    4npwp3FOwZNHs+sF
    -----END CERTIFICATE-----
---

# This is an example of a file containing admin settings to be applied to Content Server on first container start
# See the statefulsets yaml for the required Content Server volume mount and volume
#
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: cs-adminsettings-configmap
#data:
#  adminEmail.xml: |
#    <?xml version="1.0" encoding="UTF-8"?>
#    <llconfig lean='true' scope='sub'>
#      <csversion>OpenText Content Server 16.2.8 (2019-03)</csversion>
#      <Date>20190405 17:20:40</Date>
#      <System>cs1:2099</System>
#      <Comments></Comments>
#      <value key='Settings_Server_Parameters_AdminEmail'>test@opentext.com</value>
#    </llconfig>
#---
